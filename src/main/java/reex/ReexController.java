package reex;

import java.util.concurrent.atomic.AtomicLong;

import org.springframework.web.bind.annotation.*;
import org.springframework.stereotype.Controller;
import org.springframework.beans.factory.annotation.Autowired;

import javax.servlet.http.HttpServletRequest;

@RestController
@Controller //This means that class is a Controller
@RequestMapping(path="/reex") //This means URL's start with /reex

public class ReexController {

    @Autowired // This means to get the bean called clientepermutaRepository
               // which is auto-generated by Spring
    private ClientePermutaRepository clientepermutaRepository;

    @Autowired
    private CorretorRepository corretorRepository;

    /**
    private static final String template = "Hello, %s!";
    private final AtomicLong counter = new AtomicLong();

    @RequestMapping("/greeting")
    public Reex greeting(@RequestParam(value="name", defaultValue="World") String name) {
        return new Reex(counter.incrementAndGet(),
                String.format(template, name));
    }
    **/

    @GetMapping(path="/addCliente") //Map only GET requests
    public @ResponseBody String addNewClientePermuta (@RequestParam String nomecliente,
                                                      @RequestParam String emailcliente,
                                                      @RequestParam String celularcliente,
                                                      @RequestParam String enderecoimovel,
                                                      HttpServletRequest request) {
        //@ResponseBody means the returned String is the response, not a view name
        //@RequestParam means it is a parameter from the GET or POST request

        ClientePermuta cliente = new ClientePermuta();
        cliente.setNome(nomecliente);
        cliente.setEmail(emailcliente);
        cliente.setCelular(celularcliente);
        cliente.setEndereco(enderecoimovel);
        cliente.setMachineIP((request.getHeader("X-Forwarded-For") != null) ? request.getHeader("X-Forwarded-For") : request.getRemoteAddr());
        clientepermutaRepository.save(cliente);
        return "Gravado";

    }

    @PostMapping(path = "/add")
    public @ResponseBody String addNewClientePermuta (@RequestBody ClientePermuta novoCliente) {
        //@ResponseBody means the returned String is the response, not a view name
        //@RequestParam means it is a parameter from the GET or POST request

        clientepermutaRepository.save(novoCliente);
        return "Gravado";

    }

    /*
    @GetMapping(path = "/all")
    public @ResponseBody Iterable<ClientePermuta> getAllClientesPermuta(){
        //This returns a JSON or XML with all clients
        return clientepermutaRepository.findAll();
    }
    */


    @GetMapping(path = "/addBroker")
    public @ResponseBody String addBroker(@RequestParam String nomecorretor,
                                          @RequestParam String emailcorretor,
                                          @RequestParam String celularcorretor,
                                          @RequestParam String creci,
                                          HttpServletRequest request){
        Corretor corr = new Corretor();
        corr.setNome(nomecorretor);
        corr.setEmail(emailcorretor);
        corr.setCelular(celularcorretor);
        corr.setCreci(creci);
        corr.setMachineIP((request.getHeader("X-Forwarded-For") != null) ? request.getHeader("X-Forwarded-For") : request.getRemoteAddr());
        corretorRepository.save(corr);
        return "Broker Gravado";

    }
    /*
    @GetMapping(path = "/allBrokers")
    public @ResponseBody Iterable<Corretor> getAllBrokers(){
        //This returns a JSON or XML with all clients
        return corretorRepository.findAll();
    }
    */

}